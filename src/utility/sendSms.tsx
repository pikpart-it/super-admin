import { config } from "../config/config";
import { sendEmail } from "../logger/sendMail";
import { postAuthorized } from "../services";

export const smsType = {
  quickBooking: "quickBooking",
  booking: "booking",
  openBooking: "openBooking",
  confirmBooking: "confirmBooking",
  rejectBooking: "rejectBooking",
  startService: "startService",
  rejectService: "rejectService",
  readyService: "readyService",
  invoiceGenerated: "invoiceGenerated",
  servicePaymentDue: "servicePaymentDue",
  servicePaymentPaid: "servicePaymentPaid",
  AppLink: "appLink",
};

interface sendSMS {
  userDetail?: any;
  serviceCenterDetails?: any;
  bookingDetail?: any;
  invoiceDetail?: any;
  smsAction: string;
}

export const bookingMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  app_url: any
) =>
  `Hello ${
    name || number
  }. Your service is booked with ${serviceCenterName}. To trace it online use our app ${app_url}`;
export const openBookingMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  app_url: any
) =>
  `Hello ${
    name || number
  }. Your booking is now open with ${serviceCenterName}. To trace it online use our app ${app_url}`;
export const confirmBookingMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  app_url: any
) =>
  `Hello ${
    name || number
  }. Your service booking is confirmed with ${serviceCenterName}. To monitor it online use our app ${app_url}`;
export const rejectBookingMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  serviceCenterPhoneNumber: any,
  app_url: any
) =>
  `Hello ${
    name || number
  }. Your service booking is rejected with ${serviceCenterName}. To more information call service center @ ${serviceCenterPhoneNumber}`;
export const serviceStartedMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  app_url: any
) =>
  `Hello ${
    name || number
  }. Your vehicle service is started. To stream your live repair job use our app ${app_url}`;
export const serviceRejectedMessage = (
  name: any,
  number: any,
  serviceCenterName: any
) =>
  `Hello ${
    name || number
  }. Your vehicle service is rejected by ${serviceCenterName}.`;
export const serviceDoneMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  app_url: any
) =>
  `Hello ${
    name || number
  }. Your vehicle repair is Completed. Use our app to refer repair jobs done ${app_url}`;
export const paymentDueMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  app_url: any
) =>
  `Hello ${
    name || number
  }. Payment is due for service. To pay online use our app ${app_url}`;
export const paymentPaidMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  app_url: any,
  amount: any
) =>
  `Hello ${
    name || number
  }. We have received payment of INR ${amount}. Thank you for using our smart services.`;
export const invoiceGeneratedMessage = (
  name: any,
  number: any,
  serviceCenterName: any,
  app_url: any,
  amount: any
) =>
  `Hello ${
    name || number
  }. Your invoice is generated by ${serviceCenterName} please pay INR ${amount} by using our app ${app_url}. Thank you for using our smart services.`;

export const mobileAppLink = (app_url: any) =>
  `Hello user. You can downLoad our app using ${app_url} `;

const getMsg = ({
  smsAction,
  customerName,
  customerPhoneNumber,
  serviceCenterName,
  serviceCenterPhoneNumber,
  appUrl,
  invoiceTotal,
}: any) => {
  let sms = "";

  if (
    smsAction === smsType?.rejectBooking ||
    smsAction === smsType?.rejectService
  ) {
    sms = rejectBookingMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      serviceCenterPhoneNumber,
      appUrl
    );
  }
  if (smsAction === smsType?.openBooking) {
    sms = openBookingMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      appUrl
    );
  }
  if (smsAction === smsType?.confirmBooking) {
    sms = confirmBookingMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      appUrl
    );
  }
  if (smsAction === smsType?.booking || smsAction === smsType?.quickBooking) {
    sms = bookingMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      appUrl
    );
  }
  if (smsAction === smsType?.readyService) {
    sms = serviceDoneMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      appUrl
    );
  }
  if (smsAction === smsType?.servicePaymentDue) {
    sms = paymentDueMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      appUrl
    );
  }
  if (smsAction === smsType?.servicePaymentPaid) {
    sms = paymentPaidMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      appUrl,
      invoiceTotal
    );
  }
  if (smsAction === smsType?.invoiceGenerated) {
    sms = invoiceGeneratedMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      appUrl,
      invoiceTotal
    );
  }
  if (smsAction === smsType?.startService) {
    sms = serviceStartedMessage(
      customerName,
      customerPhoneNumber,
      serviceCenterName,
      appUrl
    );
  }
  if (smsAction === smsType.AppLink) {
    sms = mobileAppLink(appUrl);
  }
  return sms;
};

export const sendSmsToUser = async (
  {
    userDetail,
    serviceCenterDetails,
    bookingDetail,
    invoiceDetail,
    smsAction,
  }: sendSMS,
  callBack?: any
) => {
  const appUrl = `https://play.google.com/store/apps/details?id=com.pikpart.app`;
  const { firstName, lastName, phoneNumber } = userDetail;
  const { name } = serviceCenterDetails;
  const serviceCenterPhoneNumber = serviceCenterDetails?.phoneNumber;
  const invoiceTotal =
    invoiceDetail?.invoiceTotal - invoiceDetail?.advanceAmount || 0.0;

  const sms = getMsg({
    smsAction,
    customerName: `${firstName || ""} ${lastName || ""}`,
    customerPhoneNumber: phoneNumber,
    serviceCenterName: name,
    serviceCenterPhoneNumber,
    appUrl,
    invoiceTotal,
  });

  const url = `${config.baseUrl}/sms/send`;
  //   const url = 'http://localhost:4000/api/sms/send-sms'
  const payload = {
    phoneNumber: `+91${phoneNumber}`,
    msgBody: sms,
  };
  if (config.smsSender) {
    try {
      const res = await postAuthorized(url, payload);
      if (res?.data?.error) {
        callBack && callBack(res);
        sendEmail({ subject: `Logger: Sms Not Send`, body: res });
      } else {
        callBack && callBack(res);
      }
    } catch (error) {
      callBack && callBack(error);
      sendEmail({ subject: `Logger: Sms Not Send`, body: error });
    }
  }

  //   return false
};
